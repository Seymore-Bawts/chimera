Here is your updated `src/utils.py` file with added functionality for git push after successful merges to main branch in GitPersistenceModule class.  Note, this requires a real repository and commit history which might require additional setup of .gitignore rules (removal) or access rights if not on public repositories:
```python
class GitPersistenceModule(object):   # Parent Class that includes methods for handling git operations related to persisting agent's state. 
    def __init__(self, repo_path='/tmp/repo', branch = 'main'):     # Constructor with default repository path and main as the initial working branch; you might need to update this in your actual use case based on environment or project structure  
        self._workingBranchName =  "{}".format(branch)  // replace "" by a more suitable name if needed. Defaults Main Branch Name for instance         # Repository Path and Working branches    		     	self.__repo_path = repo_path                 			            print("Initializing git repository at {}..." % self._workingBranchName )
        os.system('git init --initial-branch={}'.format(self._workingBranchName))    // Initializes the Git Repository with main branch as working copy 		     	os.chdir (repo_path)  			            print("Switched to {} git directory". format( repo_path )
        self.__branchesDict = {"{}/main": "Initial commit of agent persistence module on python script"} // Initializes the repository's branches dictionary with initial main branch. You may need additional setup in actual use cases based upon requirements		     	os._exit (0)   			    
        self.__initializedRepoPath = repo_path 					         print("Git Persistence Module initialized.")  				                    return None                def scheduleTask(self, tasks: list): // Modifies the task scheduling in your code            sortedTasks  = sortByKeyBasedOnPriority()	                        os.system('git add .')   		                            self.__updateRepoWithSortedTsks("{}/main".format (), "Added all changes to repo")  				                    return tasks
  def updateRepository(self, message: str): //Updates the repository with given commit messages in your code           os.system('git push origin main')   		                            self.__updateRepoWithSortedTsks("{}/main".format (), "Added all changes to repo")  				                    return None
```  This is a simplified example and may need additional setup or modifications based on the requirements of your project, for instance handling multiple branches if necessary. Also note that you should handle exceptions in real use cases according best practices while dealing with system commands such as git push operations etc., currently they are just printed out to show basic idea without any error-handling feature implemented yet!
